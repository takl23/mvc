{% extends "base.html.twig" %}
{% block title %}Metric{% endblock %}

{% block body %}
<h1>Introduktion</h1>

<p>God kodkvalitet är avgörande för att kunna underhålla och förstå koden över tid, även om det kanske inte är ett krav för att skapa en fungerande 
webbplats. För att säkerställa god kodkvalitet kan vi använda oss av <b id="6C">"6C"</b> </p>

<ul>
<li>
Codestyle: Innebär att man eftersträvar en konsekvent kodstil där man till sin hjälp kan använda olika linters verktyg. Ett exempel är PHPMD (PHP Mess Detector), 
som kan hjälpa till att identifiera potentiella problem i koden och säkerställa att kodstilen är konsekvent och lättläst. 
</li>

<li>
Coverage: Är ett mått som anger hur väl man enhetstestar sin kod för att minska risken för kod som inte utför det man tänkt sig. 
Hög täckningsgrad innebär att de flesta funktioner och logik är testade, vilket minskar risken för buggar och oväntade fel. 
</li>

<li>
Complexity: Är ett sätt att mäta komplexiteten i ett program genom att räkna antalet oberoende vägar genom programmet. Tex ju fler if-satser koden 
innehåller desto fler beslutspunkter innehåller koden och desto mer komplex blir den. 
</li>

<li>
Cohesion: Mäter hur väl klasser fungerar som en egen enhet där metoderna hänger ihop. 
Låg cohesion gör koden mer logisk, lättare att förstå och underhålla, eftersom varje klass har ett tydligt definierat ansvar och syfte
</li>

<li>
Coupling: Mäter hur beroende olika delar av systemet är av varandra. Låg koppling innebär att ändringar i en modul inte påverkar andra moduler, 
vilket gör systemet mer robust och lättare att vidareutveckla
</li>

<li>
CRAP:Ett mått som kombinerar kodens komplexitet och testtäckning för att identifiera riskabla kodområden. 
Ett högt CRAP-värde indikerar kod som är både komplex och dåligt testad, vilket ökar risken för buggar.
</li>

</ul>

<h1 id="Phpmetrics">Phpmetrics</h1>
<p>
Min första analys i PhpMetrics är fokuserad på de olika stora och färgade cirklarna. 
Storlek på cirklarna representerar hur lätt det blir att underhålla koden och färg representerar 
komplexiteten. Min första analys i PhpMetric representeras nedan i bild där de 3 största cirklarna 
i rött representeras av följande klasser: 
</p>

<ul>
    <li>
    CardGameControllerJson
    </li>

    <li>
    CardGameController
    </li>

    <li>
    Game21
    </li>
</ul>

<div class="analysisimg1">
    <figure>
        <picture>
            <img src="{{ asset('img/PhpMetrics.png') }}" alt="First analysis PhpMetrics Maintainability / complexity chart">
        </picture>
        <figcaption>First analysis PhpMetrics Maintainability / complexity chart</figcaption>
    </figure>
</div>

<p>
En översyn i min kod och i synnerhet i dessa klasser ger en ganska tydlig bild av att jag är väldigt sparsam med att skriva 
kommentarer och saknar enhetstester för många klasser. Många av mina "controllers" är komplexa i första analysen i PhpMetric där 
det helt klart bör ses över om komplexitetetn med färre beslutspunkter går att förbättra. 
</p>

<h1 id="Scrutinizer">Scrutinizer</h1>

<p>
Min första analys med Scrutinizer visar jag har ett snitt på 9,85 i betyg där 10 är det högsta 
betyg. Det man kan se från den första analysen är att kodtäckningen (coverage) är endast 20%. 
Detta innebär att en stor del av koden inte är testad, vilket ökar risken för oförutsägbar kod. 
</p>

<div class="analysisimg1">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizerstart.png') }}" alt="First analysis Scrutinizer overview">
        </picture>
        <figcaption>First analysis Scrutinizer overview</figcaption>
    </figure>
</div>

<p>
Från en annan vy i Scrutinizer kan man sortera kod på komplexitet. Kod med hög komplexitet är 
oftast svårare att underhålla samt så innebär hög komplexiteten fler beslutsvägar vilket också 
innebär svårare att testa samt risk för buggar. 
</p>

<div class="analysisimg2">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizer.png') }}" alt="First analysis Scrutinizer complexity overview">
        </picture>
        <figcaption>First analysis Scrutinizer complexity overview</figcaption>
    </figure>
</div>

<p>
Ytterliggare en djupdykning i Scrutinzer vyer kan man även se vilka operationer i en klass som 
skapar hög komplexitet. 
</p>

<div class="analysisimg2">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizer_operation.png') }}" alt="First analysis Scrutinizer complexity overview methods">
        </picture>
        <figcaption>First analysis Scrutinizer complexity overview methods</figcaption>
    </figure>
</div>

<p>
Ska man sammanfatta analyzen i Scrutinizer så är det tydligt att enhetstestning bör utföras i strörre utrsträckning än vad det är gjort 
hittils. Man kan även se att delar i viss kod är mer komplex så att förenklar delar skulle göra koden mera robust.
</p>


<ul>
    <li>
    CardGameController
    </li>

    <li>
    CardGameControllerJson
    </li>

    <li>
    Game21
    </li>
</ul>

<h1>Förbättringar</h1>

<p>
I min kod har jag identifierat ett par förbättringar som jag initialt kommer fokusera på. 
Jag har utgått ifårn bilderna som är representerade ovan under rubrikerna 
<a href="#Phpmetrics">PhpMetrics</a> och <a href="#Scrutinizer">Scrutinizer</a> där målet kommer 
vara att få bättre resultat. Följande förbättringar kommer ligga i fokus:
</p>

<ul>
    <li>
    I första hand kommer jag öka enhetstestning för att öka kodtäckningen vilket bör öka min "Coverage" som är en del av de 
    <b><a href="#6C">6C</a></b> som beskrivits tidigare.
    </li>

    <li>
    Jag kommer förbättra dokumentation för CardGameController, CardGameControllerJson, Game21 för att göra 
    koden mer lättläst och lättare att underhålla vilket kan kopplas till "Codestyle" och "Cohesion" 
    som är en del av de <b><a href="#6C">6C</a></b> som beskrivits tidigare.
   </li>

    <li>
    Dela upp kod för metoderna CardGameControllerJson::jsonDrawMany(), CardGameController::drawFiveCards() och 
    App\Card\Game21::processResult() för att minska beslutsbägar och göra koden minder komplex vilket ¨
    lirar med "Complexity" som är en del av de <b><a href="#6C">6C</a></b> som beskrivits tidigare.
    </li>
</ul>


<h2>Analys innan förbättringar</h2>
<p>Nedan repserenteras de bilder från PhpMetric och Scrutinizer som är tagna innan genomförda 
förbättringar.</p>

<div class="analysisimg1">
    <figure>
        <picture>
            <img src="{{ asset('img/PhpMetrics.png') }}" alt="First analysis PhpMetrics Maintainability / complexity chart">
        </picture>
        <figcaption>First analysis PhpMetrics Maintainability / complexity chart</figcaption>
    </figure>
</div>

<div class="analysisimg1">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizerstart.png') }}" alt="First analysis Scrutinizer overview">
        </picture>
        <figcaption>First analysis Scrutinizer overview</figcaption>
    </figure>
</div>

<div class="analysisimg2">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizer.png') }}" alt="First analysis Scrutinizer complexity overview">
        </picture>
        <figcaption>First analysis Scrutinizer complexity overview</figcaption>
    </figure>
</div>

<div class="analysisimg2">
    <figure>
        <picture>
            <img src="{{ asset('img/scrutinizer_operation.png') }}" alt="First analysis Scrutinizer complexity overview methods">
        </picture>
        <figcaption>First analysis Scrutinizer complexity overview methods</figcaption>
    </figure>
</div>

<h2>Analys efter förbättringar</h2>
<p>Nedan repserenteras de bilder från PhpMetric och Scrutinizer som är tagna efter genomförda 
förbättringar.</p>

{% endblock %}